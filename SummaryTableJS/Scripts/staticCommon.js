var goProxyCallBack = goProxyCallBack || {}; $(gfInit); function gfInit() { gfGC(); BeautRadio(); BeautCheckbox(); BeautInput(); function A() { var B = $(".tableList"); B.height($("body").height() - $(".brHead").height() - $(".search").height() - 55) } if ($(".tableList").length > 0 && $(".brHead").length > 0 && $(".search").length > 0) { A(); $(window).resize(function () { A() }) } } var gbDeBug = false; if (typeof (StarSoft) == "undefined") { window.StarSoft = {} } function ResumeError() { return true } if (!gbDeBug) { window.onerror = ResumeError } var oDebug = { "info": function (B) { if (!gbDeBug) { return } try { console.info(B) } catch (A) { } }, "error": function (B) { if (!gbDeBug) { return } try { console.error(B) } catch (A) { } }, "warn": function (B) { if (!gbDeBug) { return } try { console.warn(B) } catch (A) { } } }; function gfGetBrowser() { var B = {}; var C = navigator.userAgent.toLowerCase(); var A; (A = C.match(/msie ([\d.]+)/)) ? B.ie = A[1] : (A = C.match(/firefox\/([\d.]+)/)) ? B.firefox = A[1] : (A = C.match(/chrome\/([\d.]+)/)) ? B.chrome = A[1] : (A = C.match(/opera.([\d.]+)/)) ? B.opera = A[1] : (A = C.match(/version\/([\d.]+).*safari/)) ? B.safari = A[1] : 0; return B } function gfGC() { if (gfGetBrowser().ie) { window.setInterval("CollectGarbage();", 1000 * 60) } } function loginSystem(A) { try { if (top.$("#quit").length != 0) { top.$("#quit").click(); return } } catch (C) { } var B = window.parent; while (B != B.parent) { B = B.parent } B.location.href = A } var list = { setCheckAll: function (C, F) { var D = event.srcElement; var E = document.getElementById(C); for (var B = 1; B < E.rows.length; B++) { var A = E.rows[B].cells[typeof (F) == "undefined" ? 0 : F].getElementsByTagName("input"); for (var G = 0; G < A.length; G++) { if (A[G].getAttribute("type").toLowerCase() == "checkbox") { if (!A[G].disabled) { A[G].checked = D.checked } } break } } }, getCheckedCount: function (C) { var E = document.getElementById(C); var D = 0; if (!E) { return D } for (var B = 1; B < E.rows.length; B++) { var A = E.rows[B].cells[0].getElementsByTagName("input"); for (var F = 0; F < A.length; F++) { if (A[F].getAttribute("type").toLowerCase() == "checkbox" && A[F].checked) { D = D + 1 } break } } return D }, getCheckedValue: function (C) { var D = document.getElementById(C); var E = new Array(); if (!D) { return E.join(",") } for (var B = 1; B < D.rows.length; B++) { var A = D.rows[B].cells[0].getElementsByTagName("input"); for (var F = 0; F < A.length; F++) { if (A[F].getAttribute("type").toLowerCase() == "checkbox" && A[F].checked) { E.push(A[F].value) } break } } return E.join(",") }, isSingle: function (B, A, E) { var C = false; var D = this.getCheckedCount(B); if (D == 0) { alert(A); C = false } else { if (D > 1) { alert(E); C = false } else { C = true } } return C }, isMultiple: function (C, B, A) { var D = false; var E = this.getCheckedCount(C); if (E == 0) { alert(B); D = false } else { if (A) { D = confirm(A) } else { return true } } return D } }; String.prototype.trim = function () { return this.replace(/(^\s*)|(\s*$)/g, "") }; function StringBuffer() { this._strings = new Array(); this.length = function () { return this._strings.length } } StringBuffer.prototype.append = function (A) { this._strings.push(A) }; StringBuffer.prototype.toString = function (A) { var B = A || ""; return this._strings.join(B) }; StringBuffer.prototype.removeAll = function () { this._strings = [] }; function Queue() { this.queue == [] } Queue.prototype.EnqueueRange = function (A) { this.queue = A || [] }; Queue.prototype.Enqueue = function (A) { this.queue.push(A) }; Queue.prototype.Dequeue = function () { return this.queue.shift() }; Queue.prototype.Clear = function () { this.queue = [] }; function StarSoft_Cookies(A) { var B = A || { "domain": "", "path": "/", "expires": "" }; this.get = function (C) { var D = document.cookie.match(new RegExp("(^| )" + C + "=([^;]*)(;|$)")); if (D != null) { return unescape(D[2]) } else { return "" } }; this.getChild = function (C, H) { var E = this.get(C); var F = E.split("&"); var G = ""; for (var D = 0; D < F.length; D++) { if (F[D].replace(/(^\s*)|(\s*$)/g, "").substr(0, H.length) == H) { G = F[D].replace(/(^\s*)|(\s*$)/g, "").substr(H.length + 1); break } } return G }; this.set = function (C, F) { var G = ""; if (!!C) { G += C + "=" + escape(F) + ";" } if (!!arguments[2]) { var E = arguments[2]; if (E.expires) { var D = new Date(); if (typeof E.expires == "number") { if (E.expires == 999) { D = new Date("December 31, 9998") } else { D.setTime(D.getTime() + (E.expires * 24 * 60 * 60 * 1000)) } } else { if (E.expires.toUTCString) { D = E.expires } } G += "expires=" + D.toUTCString() + ";" } if (E.domain) { G += "domain=" + E.domain + ";" } if (E.path) { G += "path=" + E.path + ";" } } document.cookie = G }; this.setAll = function (C, E, F) { var D = {}; if (F) { D.expires = F } else { D.expires = B.expires } D.domain = B.domain; D.path = "/"; this.set(C, E, D) }; this.remove = function (C) { var E = new Date(); E.setFullYear(E.getFullYear() - 1); var D = " " + C + "=;expires=" + E + ";"; document.cookie = D } } var SSCookie = new StarSoft_Cookies(); Date.prototype.format = function (A) { var B = { "M+": this.getMonth() + 1, "d+": this.getDate(), "h+": this.getHours(), "H+": this.getHours(), "m+": this.getMinutes(), "s+": this.getSeconds(), "q+": Math.floor((this.getMonth() + 3) / 3), "S": this.getMilliseconds() }; if (/(y+)/.test(A)) { A = A.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length)) } for (var C in B) { if (new RegExp("(" + C + ")").test(A)) { A = A.replace(RegExp.$1, RegExp.$1.length == 1 ? B[C] : ("00" + B[C]).substr(("" + B[C]).length)) } } return A }; Date.prototype.dateDiff = function (C, D) { var B = 1; if (!C) { return "必须是日期对象" } var A = this.getTime() - C.getTime(); switch (D) { case "ms": B = 1; break; case "s": B = 1000; break; case "m": B = 60 * 1000; break; case "h": B = 60 * 60 * 1000; break; case "d": B = 24 * 60 * 60 * 1000; break } return Math.floor(A / B) }; Date.prototype.DateAdd = function (C, A) { var B = this; switch (C) { case "s": return new Date(Date.parse(B) + (1000 * A)); case "m": return new Date(Date.parse(B) + (60000 * A)); case "h": return new Date(Date.parse(B) + (3600000 * A)); case "d": return new Date(Date.parse(B) + (86400000 * A)); case "w": return new Date(Date.parse(B) + ((86400000 * 7) * A)); case "q": return new Date(B.getFullYear(), (B.getMonth()) + A * 3, B.getDate(), B.getHours(), B.getMinutes(), B.getSeconds()); case "M": return new Date(B.getFullYear(), (B.getMonth()) + A, B.getDate(), B.getHours(), B.getMinutes(), B.getSeconds()); case "y": return new Date((B.getFullYear() + A), B.getMonth(), B.getDate(), B.getHours(), B.getMinutes(), B.getSeconds()) } return B }; Date.prototype.Init = function (A) { return new Date(A.replace(/-/g, "/")) }; Date.StrToDate = function (A) { return new Date(A.replace(/-/g, "/")) }; Date.FormatTime = function (A) { var H = ""; A = Math.round(A); var B = A % 60; if (B > 0) { H = B + "秒"; A -= B } if (A >= 60) { var J = A / 60; var E = J % 60; J -= E; H = E + "分" + H; if (J >= 60) { var I = J / 60; var C = I % 24; I -= C; H = C + "时" + H; if (I >= 24) { var L = I / 24; var G = L % 30; H = G + "天" + H; L -= G; if (L >= 30) { var F = L / 30; var D = F % 12; H = D + "月" + H; F -= D; if (F >= 12) { var K = F / 12; H = K + "年" + H } } } } } return H }; function StrToDate(A) { return new Date(A.replace(/-/g, "/")) } function ArrarCruelSearch(E, B) { if (!E || E.length <= 0) { return -1 } var A = "┢"; var C = -1; var D = (A + E.join(A) + A).split(A + B + A); if (D.length && (C = D[0].split(A).length - 1) < E.length) { return C } return -1 } var apiDialog, apiDialogW, apiDialogD; try { if (frameElement) { apiDialog = frameElement.apiDialogBase } } catch (e) { } if (apiDialog) { apiDialogW = apiDialog.opener } else { apiDialogW = window } apiDialogD = apiDialogW.document; var ssDialog = function (A) { var G = this; var B = "loadingID"; var E = "dialgID"; var F = "alertID"; var C = A; G.api = null; G.winOpen = function (Q, P, O, J, I, T, K, H, N) { var S = arguments.length; var R = N || {}; if (Q) { R.content = "url:" + Q } else { alert("请至少传递一个参数过来"); return } if (S >= 2 && P) { R.title = P } if (S >= 3 && O) { R.id = O; E = O } else { R.id = E } if (S >= 4 && J) { R.width = J } if (S >= 5 && I) { R.height = I } if (S >= 6 && T) { R.init = T } if (S >= 7) { R.lock = K } else { R.lock = true } if (S >= 9) { if (N) { R.max = N.max; R.min = N.min } } if (R.thisId) { var M = $("#" + R.thisId).offset().left; var L = $("#" + R.thisId).offset().top; if (R.direction == "Up") { R.left = "" + ((M + R.width / 2) / $(window).width()) * 100 + "%"; R.top = "" + ((L - R.height) / $(window).height()) * 100 + "%"; if (L - R.height < 0) { R.top = "" + ((L + R.height) / $(window).height()) * 100 + "%"; if (L + R.height > $(window).height()) { R.left = "" + (M / $(window).width()) * 100 + "%"; R.top = "" + ((L + R.height / 2) / $(window).height()) * 100 + "%"; if (M - R.width < 0) { R.top = "" + ((M + R.width) / $(window).width()) * 100 + "%" } } } } if (R.direction == "Down") { R.left = "" + ((M + R.width / 2) / $(window).width()) * 100 + "%"; R.top = "" + ((L + R.height) / $(window).height()) * 100 + "%"; if (L + R.height > $(window).height()) { R.top = "" + ((L - R.height) / $(window).height()) * 100 + "%"; if (L - R.height < 0) { R.left = "" + (M / $(window).width()) * 100 + "%"; R.top = "" + ((L + R.height / 2) / $(window).height()) * 100 + "%"; if (M - R.width < 0) { R.top = "" + ((M + R.width) / $(window).width()) * 100 + "%" } } } } if (R.direction == "Left") { R.left = "" + ((M - R.width / 2) / $(window).width()) * 100 + "%"; R.top = "" + ((L + R.height / 2) / $(window).height()) * 100 + "%"; if (M - R.width / 2 < 0) { R.top = "" + ((M + R.width) / $(window).width()) * 100 + "%"; if (M + R.width > $(window).width()) { R.left = "" + ((M + R.width / 2) / $(window).width()) * 100 + "%"; R.top = "" + ((L + R.height) / $(window).height()) * 100 + "%"; if (L + R.height > $(window).height()) { R.top = "" + ((L - R.height) / $(window).height()) * 100 + "%" } } } } if (R.direction == "Right") { R.left = "" + ((M + R.width) / $(window).width()) * 100 + "%"; R.top = "" + ((L + R.height / 2) / $(window).height()) * 100 + "%"; if (M + R.width > $(window).width()) { R.left = "" + ((M - R.width / 2) / $(window).width()) * 100 + "%"; if (M - R.width / 2 < 0) { R.left = "" + ((M + R.width / 2) / $(window).width()) * 100 + "%"; R.top = "" + ((L + R.height) / $(window).height()) * 100 + "%"; if (L + R.height > $(window).height()) { R.top = "" + ((L - R.height) / $(window).height()) * 100 + "%" } } } } } if (A) { G.api = A.$.dialog(R) } else { if (!H && apiDialogW) { R.parent = apiDialog; G.api = apiDialogW.$.dialog(R) } else { G.api = $.dialog(R) } } return G.api }; G.winOpenContent = function (S, P, O, I, H, N, J, M) { var R = arguments.length; var Q = M || {}; if (S) { Q.content = S } else { alert("请至少传递一个参数过来"); return } if (R >= 2 && P) { Q.title = P } if (R >= 3 && O) { Q.id = O } else { Q.id = E } if (R >= 4 && I) { Q.width = I } if (R >= 5 && H) { Q.height = H } if (R >= 6 && N) { Q.init = N } if (R >= 7) { Q.lock = J } else { Q.lock = true } if (Q.thisId) { var L = $("#" + Q.thisId).offset().left; var K = $("#" + Q.thisId).offset().top; if (Q.direction == "Up") { Q.left = "" + ((L + Q.width / 2) / $(window).width()) * 100 + "%"; Q.top = "" + ((K - Q.height) / $(window).height()) * 100 + "%"; if (K - Q.height < 0) { Q.top = "" + ((K + Q.height) / $(window).height()) * 100 + "%"; if (K + Q.height > $(window).height()) { Q.left = "" + (L / $(window).width()) * 100 + "%"; Q.top = "" + ((K + Q.height / 2) / $(window).height()) * 100 + "%"; if (L - Q.width < 0) { Q.top = "" + ((L + Q.width) / $(window).width()) * 100 + "%" } } } } if (Q.direction == "Down") { Q.left = "" + ((L + Q.width / 2) / $(window).width()) * 100 + "%"; Q.top = "" + ((K + Q.height) / $(window).height()) * 100 + "%"; if (K + Q.height > $(window).height()) { Q.top = "" + ((K - Q.height) / $(window).height()) * 100 + "%"; if (K - Q.height < 0) { Q.left = "" + (L / $(window).width()) * 100 + "%"; Q.top = "" + ((K + Q.height / 2) / $(window).height()) * 100 + "%"; if (L - Q.width < 0) { Q.top = "" + ((L + Q.width) / $(window).width()) * 100 + "%" } } } } if (Q.direction == "Left") { Q.left = "" + ((L - Q.width / 2) / $(window).width()) * 100 + "%"; Q.top = "" + ((K + Q.height / 2) / $(window).height()) * 100 + "%"; if (L - Q.width / 2 < 0) { Q.top = "" + ((L + Q.width) / $(window).width()) * 100 + "%"; if (L + Q.width > $(window).width()) { Q.left = "" + ((L + Q.width / 2) / $(window).width()) * 100 + "%"; Q.top = "" + ((K + Q.height) / $(window).height()) * 100 + "%"; if (K + Q.height > $(window).height()) { Q.top = "" + ((K - Q.height) / $(window).height()) * 100 + "%" } } } } if (Q.direction == "Right") { Q.left = "" + ((L + Q.width) / $(window).width()) * 100 + "%"; Q.top = "" + ((K + Q.height / 2) / $(window).height()) * 100 + "%"; if (L + Q.width > $(window).width()) { Q.left = "" + ((L - Q.width / 2) / $(window).width()) * 100 + "%"; if (L - Q.width / 2 < 0) { Q.left = "" + ((L + Q.width / 2) / $(window).width()) * 100 + "%"; Q.top = "" + ((K + Q.height) / $(window).height()) * 100 + "%"; if (K + Q.height > $(window).height()) { Q.top = "" + ((K - Q.height) / $(window).height()) * 100 + "%" } } } } } if (A) { G.api = A.$.dialog(Q) } else { if (!Q.isSelf && apiDialogW) { Q.parent = apiDialog; G.api = apiDialogW.$.dialog(Q) } else { G.api = $.dialog(Q) } } return G.api }; G.resize = function (M, I, N) { var L = M ? M : document.body.scrollWidth; var H = I ? I : document.body.scrollHeight + 30; var J; var K = {}; if (N) { K.id = N } else { K.id = E } if (A) { A.$.dialog(K).size(L, H) } else { if (apiDialogW) { K.parent = apiDialog; if (H > apiDialogD.documentElement.clientHeight) { H = apiDialogD.documentElement.clientHeight } J = apiDialogW.$.dialog(K).get(K.id, 1); J.size(L, H) } else { $.dialog(K).size(L, H) } } }; G.close = function (J, I) { var H = {}; if (J) { H.id = J } else { H.id = E } if (A) { A.$.dialog(H).close() } else { if (C) { C.dialog(H).close() } else { if (apiDialogW && !I) { H.parent = apiDialog; apiDialogW.$.dialog(H).close() } else { $.dialog(H).close() } } } }; G.setTitle = function (I) { var H = {}; H.id = E; if (C) { C.$.dialog(H).title(I) } else { if (apiDialogW) { H.parent = apiDialog; apiDialogW.$.dialog(H).title(I) } else { $.dialog(H).title(I) } } }; G.loading = function (J) { var I = J ? J : "程序正在努力的运行中，请稍等…"; var H = {}; H.id = B; H.icon = "loading.gif", H.content = '<div id="loading" >' + I + "</div>"; H.lock = true; H.title = false; if (C) { C.$.dialog(H) } else { if (apiDialogW) { H.parent = apiDialog; apiDialogW.$.dialog(H) } else { $.dialog(H) } } }; G.unLoad = function () { var H = {}; H.id = B; if (C) { C.$.dialog(H).close() } else { if (apiDialogW) { H.parent = apiDialog; apiDialogW.$.dialog(H).close() } else { $.dialog(H).close() } } }; G.alert = function (J, H) { var I = { title: "警告", id: F, icon: "alert.gif", fixed: true, lock: true, content: J, ok: true, resize: false }; if (H) { I.close = H } if (C) { C.$.dialog(I) } else { if (apiDialogW) { I.parent = apiDialog; apiDialogW.$.dialog(I) } else { $.dialog(I) } } }; G.confirm = function (K, J, L) { var H = K || ""; if (!J) { alert("不能当alert用哦"); return } var I = L || null; if (C) { C.$.dialog.confirm(H, J, I) } else { if (apiDialogW) { return apiDialogW.$.dialog.confirm(H, J, I, apiDialog) } else { return $.dialog.confirm(H, J, I) } } }; G.prompt = function (K, J, H, M) { var L = K || "请输入："; var I = M; if (C) { C.$.dialog.prompt(L, J, H, I) } else { if (apiDialogW) { I = I || apiDialog; return apiDialogW.$.dialog.prompt(L, J, H, I) } else { return $.dialog.prompt(L, J, H, I) } } }; G.success = function (M, H, K, L) { var J; var I = { title: "", id: F, icon: "success.gif", fixed: true, lock: true, content: M, ok: true, resize: false, init: function () { var O = this, N = 1; if (L) { N = L } var P = function () { O.title(N + " 秒后关闭"); !N && O.close(); N-- }; J = setInterval(P, 1000); P() } }; if (K) { I.close = function () { clearInterval(J); H() } } else { I.close = function () { clearInterval(J) }; if (H) { H() } } if (C) { C.$.dialog(I) } else { if (apiDialogW) { I.parent = apiDialog; apiDialogW.$.dialog(I) } else { $.dialog(I) } } }; G.notice = function (J, K, I, L) { var H = { title: "商业定制", width: 220, content: "若需要商业定制，记得联系我噢", time: 5 }; if (J) { H.title = J } if (I) { H.width = I } if (K) { H.content = K } if (L) { H.time = L } if (C) { C.$.dialog.notice(H) } else { if (apiDialogW) { return apiDialogW.$.dialog.notice(H) } else { return $.dialog.notice(H) } } }; G.max = function (I) { var H = {}; if (I) { H.id = I } else { H.id = E } if (C) { C.$.dialog(H).max() } else { if (apiDialogW) { H.parent = apiDialog; apiDialogW.$.dialog(H).max() } else { $.dialog(H).max() } } }; G.focus = function (I) { var H = {}; if (I) { H.id = I } else { H.id = E } if (C) { C.$.dialog(H).focus() } else { if (apiDialogW) { H.parent = apiDialog; apiDialogW.$.dialog(H).focus() } else { $.dialog(H).focus() } } }; G.parentDialog = function () { if (apiDialogW) { apiDialogW.reLoad() } }; G.hide = function (M, L, J, H) { var I = {}; if (M) { I.id = M } else { I.id = E } var K = false; if (L || J) { K = { millisecond: 1000, mode: "fade" }; if (L) { K.millisecond = L } if (J) { K.mode = J } if (H) { K.callback = H } } if (A) { A.$.dialog(I).hide(false, K) } else { if (C) { C.dialog(I).hide(false, K) } else { if (apiDialogW) { I.parent = apiDialog; apiDialogW.$.dialog(I).hide(false, K) } else { $.dialog(I).hide(false, K) } } } }; G.show = function (M, H, O, K, J, I) { var N = {}; if (M) { N.id = M } else { N.id = E } var L = false; if (H || O) { L = { millisecond: 1000, mode: "fade" }; if (H) { L.millisecond = H } if (O) { L.mode = O } if (K) { L.hideTime = K } if (J) { L.callback = J } if (I) { L.callback2 = I } } if (A) { A.$.dialog(N).show(false, L) } else { if (C) { C.dialog(N).show(false, L) } else { if (apiDialogW) { N.parent = apiDialog; apiDialogW.$.dialog(N).show(false, L) } else { $.dialog(N).show(false, L) } } } }; G.position = function (K, I, J) { var H = {}; if (K) { H.id = K } else { H.id = E } if (A) { A.$.dialog(H).position(I, J) } else { if (C) { C.dialog(H).position(I, J) } else { if (apiDialogW) { H.parent = apiDialog; apiDialogW.$.dialog(H).position(I, J) } else { $.dialog(H).position(I, J) } } } }; G.get = function (I) { var H = {}; if (I) { H.id = I } else { H.id = E } if (C) { return C.$.dialog(H).get(I, 1) } else { if (apiDialogW) { H.parent = apiDialog; return apiDialogW.$.dialog(H).get(I, 1) } else { return $.dialog(H).get(I, 1) } } }; try { G.parentWindow = parent.window } catch (D) { } }; function BeautInput(B) { var A = ""; if (B) { A = "#" + B + " " } $((A + ".xr-input")).each(function () { if ($.trim($(this).val()) == "") { $(this).val($(this).attr("watermark")); $(this).addClass("watermark") } }); $(A + ".xr-input").bind({ blur: function () { $(this).removeClass("onfocus"); if ($.trim($(this).val()) == $(this).attr("watermark")) { $(this).addClass("watermark") } else { if ($.trim($(this).val()) == "") { $(this).val($(this).attr("watermark")); $(this).addClass("watermark") } } }, focus: function () { $(this).removeClass("watermark"); $(this).addClass("onfocus"); if ($.trim($(this).val()) == $(this).attr("watermark")) { $(this).val("") } } }) } function BeautRadio(C) { var A = ""; if (C) { A = "#" + C + " " } var B = $(A + "label.radiolabel"); if (B.length > 0) { B.click(function () { if (!$(this).hasClass("checked")) { $("#" + $(this).attr("for")).click(); $("label.radiolabel[name='" + $(this).attr("name") + "']").removeClass("checked"); $(this).addClass("checked") } }) } } function BeautCheckbox(C) { var A = ""; if (C) { A = "#" + C + " " } var B = $(A + "label.checkboxlabel"); if (B.length > 0) { B.unbind("click"); B.click(function () { var D = $("#" + $(this).attr("forid")); D.click(); if (!$(this).hasClass("checked")) { $(this).addClass("checked"); D.attr("checked", true) } else { $(this).removeClass("checked"); D.attr("checked", false) } }) } } function SetRadioValue(B) { var A = $("#" + B); $("label.radiolabel[name='" + A.attr("name") + "']").removeClass("checked"); A.click(); $("label.radiolabel[for='" + B + "']").addClass("checked") } function SetCheckBoxValue(B, A) { $("#" + B).attr("checked", A); if (A) { $("#lab" + B).addClass("checked") } else { $("#lab" + B).removeClass("checked") } } function InputNum(B, E, D) { var F = $(B).val(); if (F != 0) { F = F.replace(/\D|^0/g, "") } if ($.isNumeric(F) && (E || E == 0)) { if (F > E) { F = E } } if (F == "") { F = D || 0 } var A = $(B).attr("minValue"); if (A || A == 0) { var C = $(B).attr("timeid"); if (C) { clearTimeout(C * 1) } C = setTimeout(function () { var G = $(B).val(); if ((A || A == 0) && $.isNumeric(A) && G < 1 * A) { $(B).val(A); oDebug.info("设置最小值" + A) } }, 500); $(B).attr("timeid", C) } $(B).val(F) } function InputCode(A) { var B = $(A).val(); B = B.replace(/[^\w]/ig, ""); $(A).val(B) } function InputForNumAndMinOrMax(F, E, A, D, B, C) { if (D != "") { $("#" + F).val(D) } else { $("#" + F).val(E) } $("#" + F).attr("maxlength", A); $("#" + F).focus(function () { if ($(this).val() == E) { $(this).val("") } }); $("#" + F).blur(function () { if ($(this).val() == "" || parseInt($(this).val()) < B || parseInt($(this).val()) > C) { $(this).val(E) } }); $("#" + F).keyup(function () { if (B < 0) { var G = /^-?[0-9]*$/; if (!G.test($(this).val())) { $(this).val(E) } } else { $(this).val($(this).val().replace(/\D/g, "")) } }); $("#" + F).attr("class", "input") } function InputForNumOrDecimal(B, E, A, D, C, F) { if (D != "") { $(B).val(D) } else { $(B).val(E) } $(B).attr("maxlength", A); $(B).focus(function () { if ($(this).val() == E) { $(this).val("") } }); $(B).blur(function () { if ($(this).val() == "" || parseFloat($(this).val()) < C || parseFloat($(this).val()) > F) { $(this).val(E) } }); $(B).keyup(function () { if (this.value == this.value2) { return } if (this.value.search(/^\d*(?:\.\d{0,2})?$/) == -1) { this.value = (this.value2) ? this.value2 : "" } else { this.value2 = this.value } }) } var goEasyuiPage = { pageSize: 20, pageList: [5, 10, 15, 20, 30, 40, 50, 100], beforePageText: "第", afterPageText: "页    共 {pages} 页", displayMsg: "当前显示 {from} - {to} 条记录   共 {total} 条记录", onBeforeRefresh: function () { } }; var gfGetEasyUIGridCol = function (D, F, G, E, C, H) { var B = E || 80; var A = { "field": D, "title": F, "align": "center", "sortable": G || false, "bIsHash": C || false, "sHashCode": H || "list_hash_", "formatter": function (K, I) { var J = ""; if (this.bIsHash) { J += '<a class="hash" index="' + I.Index + '" id="' + this.sHashCode + I.Index + '" name="' + this.sHashCode + I.Index + '">&nbsp;</a>' } if (K != undefined) { J += K } return J } }; if (E != null) { A.width = B } return A }; function LoadList(B) { var A = B; if (!B) { if (window.dataGridTBID) { A = window.dataGridTBID } } if (A) { $("#" + A).datagrid("load") } else { window.location.reload() } } function LoadParentList(A) { if (apiDialogW) { apiDialogW.LoadList(A) } else { LoadList(A) } } function ReLoadList(B) { var A = B; if (!B) { if (window.dataGridTBID) { A = window.dataGridTBID } } if (A) { $("#" + A).datagrid("reload") } else { window.location.reload() } } function ReLoadParentList(A) { if (apiDialogW) { apiDialogW.ReLoadList(A) } else { ReLoadList(A) } } function GetCheckedRow(A) { if (!A) { return "" } var E = $("#" + A).datagrid("getSelections"); if (!E || E.length <= 0) { return "" } var G = $("#" + A).datagrid("getData"); if (!G || G.rows.length <= 0) { return "" } for (var B = 0, F = E.length - 1; B <= F; B++) { var D = E[B]; var C = $.grep(G.rows, function (H) { return H.ID == D.ID }); if (!C || C.length <= 0) { continue } return E[B].ID } return "" } function GetCheckedRows(E) { if (!E) { return "" } var B = $("#" + E).datagrid("getChecked"); if (!B || B.length <= 0) { return "" } var F = new StringBuffer(); var C = $("#" + E).datagrid("getData"); if (!C || C.rows.length <= 0) { return "" } for (var H = 0, D = B.length - 1; H <= D; H++) { var G = B[H]; var A = $.grep(C.rows, function (I) { return I.ID == G.ID }); if (!A || A.length <= 0) { continue } F.append(B[H].ID); if (H != D) { F.append(",") } } return F.toString() } function ztreeSelClass(H, N, P, Z, A) { var X = this; var V = "ZtreeContent"; var Q = null; var a = null; var L = null; var O = null; var B = 0; var E = "name", C = "sID", D = "ztreeIndex"; var W = true; function K(d) { var h = 9999; var b = 1000; var g = h - b; var f = Math.random(); var c = d + new Date().format("HHmmss") + "_"; c = c + (b + Math.round(f * g)); return c } function T(g) { var q = [], c; if (!g) { Q.cancelSelectedNode(); q = Q.getNodes(); c = $.trim(O.val()); c = c.toUpperCase() } if ((W && g) || (a.length == 1 && a[0].id <= 0)) { } else { var b = 0; var d = null; var p = null; var o = false; function k(j) { var t = 0; if (j.type == "else") { Q.hideNode(j); return 0 } if (j.type == 12) { if (g || j.name.toUpperCase().indexOf(c) >= 0) { Q.showNode(j); if (!p && !j.selDisabled) { p = j } t = 1; if (!d && j.name.toUpperCase() == c && !j.selDisabled) { d = j } } else { Q.hideNode(j) } return t } if (!j.children || j.children.length <= 0) { Q.hideNode(m); return 0 } for (var i = 0, s = j.children.length; i < s; i++) { var r = k(j.children[i]); if (r > 0 && !o) { o = true; Q.expandNode(j, true, true, true, false) } if (r == 0) { Q.hideNode(j.children[i]) } else { Q.showNode(j.children[i]) } t += r } if (t == 0) { Q.hideNode(j) } else { Q.showNode(j) } return t } for (var h = 0, l = q.length; h < l; h++) { var m = q[h]; var n = k(m); if (n == 0) { Q.hideNode(m) } else { Q.showNode(m) } b += n } var f = Q.getNodeByParam("id", -1); if (!g) { base.inputObj.attr(C, ""); base.inputObj.attr(D, "") } if (b == 1 && !d && p) { d = p } if (b == 0) { Q.showNode(f) } else { Q.hideNode(f); if (d) { setTimeout(function () { Q.selectNode(d); base.inputObj.focus() }, 200) } if (!g && d) { base.inputObj.attr(C, d.sID); base.inputObj.attr(D, d.carIndex) } } } if (!L.is(":visible")) { U() } O.focus() } function U() { var d = O.offset(); var c = L.width(); var b = $("body").width(); if (parseInt(L.outerWidth()) < O.outerWidth()) { L.css("min-width", (O.outerWidth() - 17) + "px") } if (b > (d.left + c)) { L.css({ left: d.left + "px", top: (d.top + O.outerHeight()) + "px" }).slideDown("fast", function () { if ((L.offset().left + L.outerWidth()) >= $("body").width()) { L.css({ right: 5 + "px", left: "auto" }); O.focus() } }) } else { L.css({ right: 5 + "px", top: (d.top + O.outerHeight()) + "px" }).slideDown("fast"); O.focus() } $("body").bind("mousedown", I) } function J() { if (L) { L.fadeOut("fast") } if (O) { O.focus() } $("body").unbind("mousedown", I) } function I(b) { var c = $(b.target); if (!(c.attr("id") == O.attr("id") || b.target.id == V || $(b.target).parents("#" + V).length > 0)) { J() } } function R(b, c, d) { O.val(d[E]); O.removeClass("redborder"); O.attr(C, d[C]); O.attr(D, d[D]) } function Y(b, c) { if (c.selDisabled) { return false } } function G(b, c) { if (c.type == 12) { return true } else { return false } } var M = { view: { dblClickExpand: false, selectedMulti: false, showTitle: G }, data: { key: { title: "CarStateTxt" }, simpleData: { enable: true } }, callback: { beforeClick: Y, onDblClick: J, onClick: R } }; function F() { if ($("#" + V).length <= 0) { $("body").append('<div id="' + V + '" class="menuContent" style="display:none; position: absolute;width:auto;z-index:999;height:auto;overflow-x: auto;overflow-y: auto;padding-right: 15px;max-width:200px;min-width:120px;max-height:300px;"><ul id="' + X.zTreeID + '" class="ztree" style="margin-top:0;width:auto;height:auto;"></ul></div>') } L = $("#" + V); if (Q) { $.fn.zTree.destroy(X.zTreeID) } Q = null; Q = $.fn.zTree.init($("#" + X.zTreeID), M, a); X.bFinishInit = true } function S() { V = K("ZtreeContent"); if (N) { $.extend(M, N) } E = P ? P : E; C = Z ? Z : C; D = A ? A : D; if (!H) { return } a = H; F() } S(); X.bFinishInit = false; X.zTreeID = K("ztree"); X.fInitZtree = function (b) { if (!b) { return } a = b; F() }; X.fSel = function (b, d) { if (!b) { J(); return } O = $(b); if (!X.bFinishInit) { O.val("正在加载数据，请稍等…"); setTimeout(function () { X.fSel(b, d) }, 500); return } if (O.val() == "正在加载数据，请稍等…") { O.val("") } if (!d) { var c = O.attr("oldV"); if (c && c == O.val()) { return } } if (O) { O.attr("oldV", $.trim(O.val())) } if (B) { clearTimeout(B) } if (!d) { if (!O.val()) { O.attr(C, ""); O.attr(D, ""); J(); return } B = setTimeout(function () { T() }, 500); return } T(d) } } function gfInitSeaJsConfig() { var A = ""; var B = "5"; if (window.staticDomain) { A = window.staticDomain } else { if ($("head").attr("staticDomain").length != 0) { window.staticDomain = $("head").attr("staticDomain"); A = window.staticDomain } } if (gbDeBug) { seajs.config({ base: A + "/static/src", debug: 2, alias: {}, paths: { "StarSoft.MC": "ui/monitor/src" }, map: [[".js", ".js?v=" + B]] }) } else { seajs.config({ base: A + "/static/modules", alias: {}, paths: { "StarSoft.MC": "StarSoft/MC/1.1.0" } }) } } function gfBlockInit(A) { A = A || "正在加载，请稍等……"; $.blockUI({ message: "<div style=' height:40px; line-height:40px;'>" + A + "</div>'", css: { width: "200px", height: "40px" }, baseZ: 2000 }) } function gfUnBlockInit() { $.unblockUI() } function sethash(C, B) { if (!B) { if ("undefined" == typeof window.APIDomain) { $.getScript(window.staticDomain + "/static/Api/APIDomain.js", function () { console.info(C + B); sethash(C, B) }); return } B = window.APIDomain.Main + "/proxy.htm?rad=" } var A = $("#iframeC"); if (A.length <= 0) { A = $('<iframe id="iframeC" height="0" width="0" style="display:none" ></iframe> '); $("body").append(A) } A.attr("src", B + "#" + C) } function gfCreatMenuTab(G, N, I, A, C, F, D) { var J, M, H, L, B, E; J = "curet" + G + "_tp"; if (A) { M = "iframe.aspx?right=" + G + "&url=" + encodeURIComponent(C + I) + "&sec=" + A; E = A } else { M = I; E = G } H = I; L = C; B = N; top.tab.createTab(J, M, H, L, B, E); function K(Q, T, S, R, U) { var O = "ifrd_curet" + T + "_tp"; try { if (S) { if (top.frames[O].frames["Frame" + S].document.readyState != "complete") { setTimeout(function () { K(Q, G, A, F, D) }, 100); return } top.frames[O].frames["Frame" + S].goProxyCallBack[R](U) } else { if (top.frames[O].document.readyState != "complete") { setTimeout(function () { K(Q, G, A, F, D) }, 100); return } top.frames[O].goProxyCallBack[R](U) } } catch (P) { if (Q > 60) { return } Q++; setTimeout(function () { K(Q, G, A, F, D) }, 1000) } } if (F) { setTimeout(function () { K(1, G, A, F, D) }, 100) } } var carTreeSort = { sortByName: function (B, A) { if (B.Type == 12 && B.Type == A.Type) { if (!B.Disabled && !A.Disabled) { return B.Name.localeCompare(A.Name) } else { if (!B.Disabled && A.Disabled) { return -1 } else { if (B.Disabled && !A.Disabled) { return 1 } else { return B.Name.localeCompare(A.Name) } } } } else { if (B.Type == 11 && B.Type == A.Type) { return B.Name.localeCompare(A.Name) } else { if (B.Type == 10 && B.Type == A.Type) { if (B.Value < A.Value) { return -1 } return 1 } else { if (B.Type > A.Type) { return 1 } else { return 0 } } } } }, sortBySelfNum: function (B, A) { if (B.Type == 12 && B.Type == A.Type) { if (!B.Disabled && !A.Disabled) { return B.SelfNum.localeCompare(A.SelfNum) } else { if (!B.Disabled && A.Disabled) { return -1 } else { if (B.Disabled && !A.Disabled) { return 1 } else { return B.SelfNum.localeCompare(A.SelfNum) } } } } else { if (B.Type == 11 && B.Type == A.Type) { return B.Name.localeCompare(A.Name) } else { if (B.Type == 10 && B.Type == A.Type) { if (B.Value < A.Value) { return -1 } return 1 } else { if (B.Type > A.Type) { return 1 } else { return 0 } } } } } }; function gfRequest(E, D) { var B = D ? D.substring(D.indexOf("?") + 1, D.length) : window.location.search.substr(1); var C = new RegExp("(^|&)" + E + "=([^&]*)(&|$)", "i"); var A = B.match(C); if (A != null) { return unescape(A[2]) } return null } function gfGetDomain(B) { if (!B) { return "/" } var A = B.split("//"); var C = A[1].split("/"); return A[0] + "//" + C[0] + "/" } function gfGetReferrerDomain() { var B = A(window); return gfGetDomain(B); function A(D) { try { var E = D.parent.document.referrer; if (!E) { return D.document.referrer } else { var F = gfGetDomain(E); if (B != F) { return E } } return A(D.parent) } catch (C) { return D.document.referrer } } } function gfGetPageDomain() { var A = document.URL; return gfGetDomain(A) } function gfGetPageUrlDomain(B) { var D = B || document.URL; var A = D.split("//"); var C = A[1].split("/"); return C[0] } var pageAction = function (B) { var A = this; A.Delete = function (E, C, D) { if (E == "" || E == "0") { E = list.getCheckedValue("tbList"); if (E == "") { B.alert("请选择一条数据进行操作！"); return } } B.confirm("确认删除？", function () { $.ajax({ type: "get", url: "?action=" + C + "&IDs=" + E, dataType: "json", cache: false, beforeSend: function () { B.loading("数据删除中，请稍等……"); return true }, success: function (F) { if (D && D != null && D != "") { if (F.isSuc == 1) { B.alert(F.meta, function () { $("#" + D).click() }) } else { B.alert(F.meta) } } else { B.alert(F.meta) } }, error: function () { B.alert("对不起，出现错误了,请刷新页面重新操作。<br>") }, complete: function () { B.unLoad() } }) }) } }; var Toremind = function () { var B = this; B.select_click = function A(C) { $(".r_select").bind("click", function () { $(this).find(".selectCon").slideToggle("fast") }); $(".selectCon > li > a").live("click", function () { $(".r_select > span").text($(this).text() + "/" + C); if (parseInt($(this).text()) == 1) { $("#btnPrev").attr("class", "r_prev1"); $("#btnPrev").attr("disabled", true); $("#btnNext").attr("class", "r_next"); $("#btnNext").attr("disabled", false) } else { if (parseInt($(this).text()) == 10) { $("#btnNext").attr("class", "r_next1"); $("#btnNext").attr("disabled", true); $("#btnPrev").attr("class", "r_prev"); $("#btnPrev").attr("disabled", false) } else { $("#btnPrev").attr("class", "r_prev"); $("#btnPrev").attr("disabled", false); $("#btnNext").attr("class", "r_next"); $("#btnNext").attr("disabled", false) } } }) }; B.select_mouse = function () { $(".selectCon").live("mouseenter", function () { $(this).css("display", "block") }).live("mouseleave", function () { $(this).css("display", "none") }); $(".r_select").bind("mouseleave", function () { $(this).find(".selectCon").css("display", "none") }) }; B.PrevInfo = function () { $("#ul").css("display", "none"); var C = parseInt($(".r_select > span").text().split("/")[0]); if (C == 1) { return } $("#btnNext").attr("class", "r_next"); $("#btnNext").attr("disabled", false); if (C == 2) { $("#btnPrev").attr("class", "r_prev1"); $("#btnPrev").attr("disabled", true) } $(".r_select").find("a").each(function () { var D = parseInt($(this).html()); if (D == C - 1) { $(this).click(); $("#ul").css("display", "none"); return } }) }; B.NextInfo = function () { $("#ul").css("display", "none"); var D = parseInt($(".r_select > span").text().split("/")[0]); var C = parseInt($(".r_select > span").text().split("/")[1]); if (D == C) { return } $("#btnPrev").attr("class", "r_prev"); $("#btnPrev").attr("disabled", false); if (D == C - 1) { $("#btnNext").attr("class", "r_next1"); $("#btnNext").attr("disabled", true) } $(".r_select").find("a").each(function () { var E = parseInt($(this).html()); if (E == D + 1) { $(this).click(); $("#ul").css("display", "none"); return } }) } }; var TreeNodeClass = function () { var D = this; var A = null; var B = null; var E = null; D.fGetTreeNodeControl = function (G, H, F) { A = H; B = G; D.fGetFlexBox(); D.fGetTree(); D.fGetSelectNode(F); D.fGetHistoryNode() }; D.fGetCheckedNodes = function (J) { var G = window.document.getElementById(A + "_sel"); var H = G.length; var I = []; if (H > 0) { for (var F = 0; F < H; F++) { if (J) { I.push(G.options[F].value.split("-")[0]) } else { I.push(G.options[F].text) } } } return I }; D.fGetTree = function () { var G = $("<div style='width:200px;height:170px;overflow:auto;border:1px solid #BCBCBC;float:left;margin-left:10px'></div>"); var F = $("<ul></ul>"); F.attr("class", "ztree"); F.attr("id", A + "_treeDemo"); G.append(F); $("#" + A).append(G); var H = { check: { enable: true, autoCheckTrigger: true }, data: { simpleData: { enable: true } }, callback: { onCheck: D.fZTreeOnCheck } }; var I = $.extend([], B.tree); $.fn.zTree.init($("#" + A + "_treeDemo"), H, I); var K = $.fn.zTree.getZTreeObj(A + "_treeDemo"), J = { "Y": "ps", "N": "ps" }; K.setting.check.chkboxType = J }; D.fGetFlexBox = function () { var I = $("<div style='widht:100%;height:30px;'></div>"); var F = $("<div class='inputdiv' style='float: left; margin-left: 10px;margin-top: 5px; '></div>"); F.attr("id", A + "_Flex"); var K = $("<div style='float: left; margin-left: 5px; margin-top: 4px;'></div>"); var J = $("<input type='button' value='查询' class='btn cssSprite1' />"); J.attr("id", A + "_search"); $("#" + A + "_search").live("click", function () { C(false) }); K.append(J); I.append(F).append(K).append('<div style="margin-left: 75px; float: left; font-weight: bold; color: #d22328;margin-top: 5px;">[ 已选：<span id="' + A + 'spanCount">0</span> ]</div>'); $("#" + A).append(I); var H = { "results": [] }; var O = $.extend([], B.tree); if (O != "" && O.length > 0) { var L, N; for (var M = 0, G = O.length; M < G; M++) { L = O[M].id.split("-"); if (L.length > 1 && L[1] == "12") { N = { "id": L[0], "name": O[M].name, "search": O[M].name }; H.results.push(N) } } } $("#" + A + "_Flex").flexbox(H, { allowInput: true, paging: false, showArrow: true, maxVisibleRows: 8, position: "absolute", onSelect: function () { C(true) } }); $("#" + A + "_Flex_arrow").css("display", "none") }; var C = function (I) { if (E == null) { E = $.fn.zTree.getZTreeObj(A + "_treeDemo") } E.expandAll(true); var G; var H; if (I) { H = $("#" + A + "_Flex_hidden").val().trim(); if (H == "0") { return } H = H + "-12"; G = E.getNodesByParam("id", H, null) } else { H = $("#" + A + "_Flex_input").val().trim(); if (H == "") { return } G = E.getNodesByParamFuzzy("name", H, null) } if (G) { for (var F = 0; F < G.length; F++) { if (F == 0) { window.location.hash = G[F].id } if (G[F].checked) { continue } D.fSetlb(G[F].id, G[F].name); E.checkNode(G[F], true); E.selectNode(G[F]) } } }; D.fGetSelectNode = function (N) { var M = $("<div style='width: 150px; float: right; height: 170px; margin-right: 10px;'></div>"); var P = $("<div style='float: left; width: 50px;'></div>"); if (N) { var G = $("<input type='button' value='置顶'  style='margin-top: 5px;'  class='btn cssSprite1' />"); G.attr("id", A + "_stick"); P.append(G); $("#" + A + "_stick").live("click", function () { var Q = window.document.getElementById(A + "_sel"); if (Q.length > 1 && Q.selectedIndex != 0) { var R = Q.options[0]; var S = Q.options[Q.selectedIndex]; $(R).before(S) } }); var K = $("<input type='button' value='上移'  style='margin-top: 5px;'  class='btn cssSprite1' />"); K.attr("id", A + "_up"); P.append(K); $("#" + A + "_up").live("click", function () { var Q = window.document.getElementById(A + "_sel"); var T = Q.selectedIndex; if (Q.length > 1 && T != 0) { var R = Q.options[T - 1]; var S = Q.options[T]; $(R).before(S) } }); var L = $("<input type='button' value='下移'  style='margin-top: 5px;'  class='btn cssSprite1' />"); L.attr("id", A + "_down"); P.append(L); $("#" + A + "_down").live("click", function () { var Q = window.document.getElementById(A + "_sel"); var T = Q.selectedIndex; if (Q.length > 1 && T != Q.length - 1) { var R = Q.options[T + 1]; var S = Q.options[T]; $(R).after(S) } }); var I = $("<input type='button' value='置末'  style='margin-top: 5px;'  class='btn cssSprite1' />"); I.attr("id", A + "_end"); P.append(I); $("#" + A + "_end").live("click", function () { var Q = window.document.getElementById(A + "_sel"); var T = Q.selectedIndex; if (Q.length > 1 && T != Q.length - 1) { var R = Q.options[Q.length - 1]; var S = Q.options[T]; $(R).after(S) } }) } var O = $("<input type='button' value='移除'  style='margin-top: 5px;'  class='btn cssSprite1' />"); O.attr("id", A + "_remove"); $("#" + A + "_remove").live("click", function () { D.fQKremove() }); P.append(O); var F = $("<input type='button' value='清空'  style='margin-top: 5px;'  class='btn cssSprite1' />"); F.attr("id", A + "_clear"); P.append(F); $("#" + A + "_clear").live("click", function () { if (E == null) { E = $.fn.zTree.getZTreeObj(A + "_treeDemo") } E.checkAllNodes(false); $("#" + A + "_sel").empty() }); M.append(P); var J = $("<div style='height: 100%;'></div>"); var H = $("<select  style='height: 100%; width: 100px; border: 1px solid #BCBCBC;' size='4'></select>"); H.attr("id", A + "_sel"); $("#" + A + "_sel").live("dblclick", function () { D.fQKremove() }); J.append(H); M.append(J); $("#" + A).append(M) }; D.fZTreeOnCheck = function (H, F, G) { if (G.id.split("-")[1] != 12) { return } if (G.checked) { D.fSetlb(G.id, G.name) } else { D.fRemove(G.id) } }; D.fSetlb = function (I, G) { var J = window.document.getElementById(A + "_sel"); var H = J.length; if (H > 0) { for (var F = 0; F < H; F++) { if (J.options[F].value == I) { return } } } J.options[H] = new Option(G, I, true, true); $("#" + A + "spanCount").html($("#" + A + "_sel option").length) }; D.fRemove = function (I) { var H = window.document.getElementById(A + "_sel"); var G = H.length; for (var F = 0; F < G; F++) { if (H.options[F].value == I) { H.options[F].parentNode.removeChild(H.options[F]); if (F != 0) { H.options[F - 1].selected = true } break } } $("#" + A + "spanCount").html($("#" + A + "_sel option").length) }; D.fQKremove = function () { var F = window.document.getElementById(A + "_sel"); var G = F.selectedIndex; if (G >= 0) { var H = F.options[G].value; F.options[G].parentNode.removeChild(F.options[G]); if (G != 0) { F.options[G - 1].selected = true } D.fRemoveTreeNode(H); if (G == 0 && F.length > 0) { F.options[F.length - 1].selected = true } } $("#" + A + "spanCount").html($("#" + A + "_sel option").length) }; D.fRemoveTreeNode = function (G) { if (E == null) { E = $.fn.zTree.getZTreeObj(A + "_treeDemo") } var F = E.getNodeByParam("id", G, null); if (F) { window.location.hash = F.id; E.selectNode(F); E.checkNode(F, false) } $("#" + A + "spanCount").html($("#" + A + "_sel option").length) }; D.fGetHistoryNode = function () { var I = $.fn.zTree.getZTreeObj(A + "_treeDemo"); var K = I.getCheckedNodes(true); var H = $("#" + A + "_sel"); var F; if (K && K.length > 0) { for (var G = 0, J = K.length; G < J; G++) { F = $('<option value="' + K[G].id + '" >' + K[G].name + "</option>"); if (F != null) { if (G == 0) { F.attr("selected", true) } H.append(F) } } } $("#" + A + "spanCount").html($("#" + A + "_sel option").length) } }; var goUtils = { "SetServiceFlag": function (A) { var B = A.ServiceState * 1; if (!A.SOID || !A.TerminalSign) { A.Disabled = true; A.CarStateTxt = "未入网"; A.CarStateFlag = "wei_ru_wang"; return } switch (B) { case 1: A.Disabled = false; A.CarStateTxt = "正常"; A.CarStateFlag = "pcar"; break; case 4: A.Disabled = false; A.CarStateTxt = "暂时开机"; A.CarStateFlag = "pcar"; break; case 3: A.Disabled = false; A.CarStateTxt = "欠费"; A.CarStateFlag = "pcar"; break; case 0: A.Disabled = true; A.CarStateTxt = "欠费停机"; A.CarStateFlag = "qian_fei_ting_ji"; break; case 2: A.Disabled = true; A.CarStateTxt = "保号停机"; A.CarStateFlag = "bao_hao_ting_ji"; break; default: A.Disabled = true; A.CarStateTxt = "未知状态"; A.CarStateFlag = "pcar"; break } }, "Extend": function (C, B) { C = C || {}; B = B || {}; for (var A in B) { C[A] = B[A] } return C }, "RefreshCarSet": { "DiffTimeCurentCar": 20, "DiffTimeRefreshCar": 300, "DiffTimeMCCar": 40, "DiffTimeRefreshGPSDataTimer": 1000 * 10, "IsRefreshGridAddr": false, "IsRefreshInfoWAddr": false }, "gpsConfig": { maxSpeed: 7, maxDiffDay: 30, maxOnLineMinute: 15 }, "gpsStateConfig": { treeText: { unLock: "未锁定", offLine: "离线", stop: "停止", move: "行驶中" }, treeColor: { unLock: "black", offLine: "brown", stop: "blue", move: "green" }, refreshTime: { unlock: 100, offline: 120, stop: 60, move: 40 } }, "CarStatis": { total: 0, stop: 0, move: 0, offline: 0, ldle: 0, momentum: 0, intransit: 0 }, "oGPSFun": { "fGetSpeedTxt": function (B, C, A) { if (C && !A) { if (B < goUtils.gpsConfig.maxSpeed) { return "停止" } return B + "公里/小时" } return "未知" }, "fSetDirectAndCarState": function (B) { if (B.IsOffLine) { B.DirectionImg = "offline"; B.DirectionText = "离线"; B.CarStateFlag = "offline"; B.CarStateTxt = "离线"; return } if (!B.IsLock) { B.DirectionImg = "unlock"; B.DirectionText = "未锁定"; B.CarStateFlag = "unlock"; B.CarStateTxt = "未锁定"; return } if (B.Speed < goUtils.gpsConfig.maxSpeed) { B.DirectionImg = "stop"; B.DirectionText = "停车"; B.CarStateFlag = "stop"; B.CarStateTxt = "停车"; return } B.CarStateFlag = "move"; B.CarStateTxt = "行驶"; var A = B.Direction / 10; if ((A >= 337.5 && A <= 360) || (A >= 0 && A <= 22.5)) { B.DirectionImg = "north"; B.DirectionText = "正北"; return } if (A > 22.5 && A < 67.5) { B.DirectionImg = "northeast"; B.DirectionText = "东北"; return } if (A >= 67.5 && A <= 112.5) { B.DirectionImg = "east"; B.DirectionText = "正东"; return } if (A > 112.5 && A < 157.5) { B.DirectionImg = "southeast"; B.DirectionText = "东南"; return } if (A >= 157.5 && A <= 202.5) { B.DirectionImg = "south"; B.DirectionText = "正南"; return } if (A > 202.5 && A < 247.5) { B.DirectionImg = "southwest"; B.DirectionText = "西南"; return } if (A >= 247.5 && A <= 292.5) { B.DirectionImg = "west"; B.DirectionText = "正西"; return } if (A > 292.5 && A < 337.5) { B.DirectionImg = "northwest"; B.DirectionText = "西北"; return } B.DirectionImg = "unknow"; B.DirectionText = "未知"; return } }, "fMCPageState": function (B, A) { var D = false; var C = function () { var F = document.documentElement.clientHeight; if (F == 0) { return false } return true }; var E = function () { var F = C(); if (F && !D) { B() } else { if (!F && D) { A() } } D = F; setTimeout(E, 1000) }; E() }, "fFormatLngLat": function (A) { return Math.round((A * 3600000).toFixed(6)) }, "fServerLngLatToClient": function (A) { return (A / 3600000).toFixed(6) } }; function gfQuitSort(G, B, E) { var C = [], I = [], D = 0, H = G.length; var A; if (typeof B == "string") { for (; D < H; D++) { A = G[D]; (C[D] = new String(A && A[B] || ""))._obj = A } } else { if (typeof B == "function") { for (; D < H; D++) { A = G[D]; var F = D <= H - 1 ? G[D + 1] : false; (C[D] = new String(A && F && B(A, F) || ""))._obj = A } } else { throw "参数类型错误" } } C.sort(function (K, J) { K.localeCompare(J) }); for (D = 0; D < H; D++) { I[D] = C[D]._obj } if (E) { I.reverse() } return I };